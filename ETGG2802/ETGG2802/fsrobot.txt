#version 150




uniform sampler2D tex;
uniform sampler2D etex;
uniform sampler2D stex;
uniform sampler2D bumpmap;
uniform sampler2D shadowbuffer;

uniform vec3 lightPos;
uniform vec3 lightcolor;
uniform vec3 eyePos;
uniform float roughness;
uniform float mode;
uniform mat4 worldMatrix;
uniform vec3 hitheryon;
uniform mat4 lightviewmat;
uniform mat4 lightprojmat;



in vec2 v_texcoord;
in vec3 v_normal;
in vec3 v_worldPos;
in vec3 v_tangent;
in vec3 v_bitangent;



out vec4 color;









void main(){

	if (mode==1.0){
	
		vec4 pe = vec4(v_worldPos,1.0) * lightviewmat;
		vec4 ps = pe * lightprojmat;
		ps.xyz = ps.xyz/ps.w;
		vec2 tc = vec2((ps.x+1)/2,(ps.y+1)/2);
		vec4 texas = texture(shadowbuffer,tc);
		texas = hitheryon.x + (texas - 0) * (hitheryon.z)/(1 - 0);
		if (-pe.z < 0 || -pe.z > texas.r + 0.005){
		
			color = vec4(0.1,0.1,0.1,1);
		
		
		}
		else
		{
		
			vec4 q = texture(bumpmap,v_texcoord);
			q.r = -1 + (q.r * 2);
			q.g = -1 + (q.g * 2);
			q.b = -1 + (q.b * 2);
			q.a = -1 + (q.a * 2);	
			mat3 Q = mat3(v_tangent.x,v_bitangent.x,v_normal.x,v_tangent.y,v_bitangent.y,v_normal.y,v_tangent.z,v_bitangent.z,v_normal.z);
			vec3 norm = q.rgb * Q;
			vec4 n = vec4(v_normal,0.0);
			n = n * worldMatrix;
			vec3 N = normalize(n.xyz);
			vec3 L = normalize(lightPos - v_worldPos);
			vec3 V = normalize(eyePos - v_worldPos);
			vec3 R = reflect( -L,N );
			float diffuse = clamp( dot(N,L), 0.0, 1.0 );
			float specular = pow( max( 0.0, dot(V,R)) , 32.0 ); //hardcoded exponent
			specular *= sign(diffuse);  //no specular if no diffuse
			color = texture(tex,v_texcoord);
			color.rgb *= diffuse;
			color.rgb += vec3(specular);
		
		
		
		
		
		
		}
		
	}
	else{
		vec4 pe = vec4(v_worldPos,1.0) * lightviewmat;
		vec4 ps = pe * lightprojmat;
		ps.xyz = ps.xyz/ps.w;
		vec2 tc = vec2((ps.x+1)/2,(ps.y+1)/2);
		vec4 texas = texture(shadowbuffer,tc);
		texas = hitheryon.x + (texas - 0) * (hitheryon.z)/(1 - 0);
		if (-pe.z < 0 || -pe.z > texas.r + 0.005){
		
			color = vec4(0.1,0.1,0.1,1);
		
		
		}
		else{
			vec4 specmtl = texture(stex,v_texcoord);
			vec4 q = texture(bumpmap,v_texcoord);
			q.r = -1 + (q.r * 2);
			q.g = -1 + (q.g * 2);
			q.b = -1 + (q.b * 2);
			q.a = -1 + (q.a * 2);	
			mat3 Q = mat3(v_tangent.x,v_bitangent.x,v_normal.x,v_tangent.y,v_bitangent.y,v_normal.y,v_tangent.z,v_bitangent.z,v_normal.z);
			vec3 norm = q.rgb * Q;
			vec4 n = vec4(norm,0.0);
			n = n * worldMatrix;
			vec3 N = normalize(n.xyz);
			vec3 L = normalize(lightPos - v_worldPos);
			vec3 V = normalize(eyePos - v_worldPos);
			float diffuse = clamp( dot(N,L), 0.0, 1.0 );
			float r=roughness;
			vec3 one = vec3(1.0);
			vec3 H = normalize(0.5*(L+V));
			vec3 sp = min(specmtl.rgb,vec3(0.95));
			vec3 sqrtk = sqrt(sp);
			vec3 no = (-one - sqrtk) / (sqrtk - one);
			vec3 cos_a = vec3(dot(N,V));
			vec3 cos_b = vec3(dot(N,L));
			vec3 cos_c = vec3(dot(V,H));
			vec3 cos_d = vec3(dot(N,H));
			vec3 q2 = sqrt(cos_c*cos_c - one + no*no);
			vec3 f1 = q2 - cos_c;
			vec3 f2 = q2 + cos_c;
			vec3 f3 = (f2 * cos_c)-one;
			vec3 f4 = (f1 * cos_c)+one;
			vec3 Q1 = f1/f2;
			Q1*=Q1;
			vec3 Q2 = f3/f4;
			Q2*=Q2;
			vec3 F=vec3(0.5)*Q1*(one+Q2);
			float cos2d = cos_d[0]*cos_d[0];
			float t = r*(1.0-1.0/cos2d);
			float M = r*exp(t)/(4.0*cos2d*cos2d);
			float A = clamp(2.0*cos_d[0]*min(cos_a[0],cos_b[0])/cos_c[0],0.0,1.0);
			vec3 specular = vec3(M)*F*vec3(A)/(cos_a*cos_b*vec3(3.14159265358979323));
			specular *= sign(dot(N,L));
			color = texture(tex,v_texcoord);
			color.rgb *= diffuse;
			color.rgb += specular * texture(stex,v_texcoord).rgb;
			color.rgb += texture(etex,v_texcoord).rgb;
		}
	
	
	
	}
    

	
}
